
// AUTO GENERATED by vnxcppcodegen

#include <vnx/query/Aggregate.hxx>
#include <vnx/query/Average.hxx>
#include <vnx/query/Comparison.hxx>
#include <vnx/query/Count.hxx>
#include <vnx/query/Delete.hxx>
#include <vnx/query/Expression.hxx>
#include <vnx/query/Field.hxx>
#include <vnx/query/Function.hxx>
#include <vnx/query/GroupBy.hxx>
#include <vnx/query/Limit.hxx>
#include <vnx/query/Max.hxx>
#include <vnx/query/Min.hxx>
#include <vnx/query/OrderBy.hxx>
#include <vnx/query/Query.hxx>
#include <vnx/query/Select.hxx>
#include <vnx/query/Sum.hxx>
#include <vnx/query/Unary.hxx>
#include <vnx/query/Update.hxx>
#include <vnx/query/Value.hxx>
#include <vnx/query/func_type_e.hxx>
#include <vnx/query/op_type_e.hxx>

#include <vnx/query/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

void type<::vnx::query::Aggregate>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Aggregate());
}

void type<::vnx::query::Aggregate>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Aggregate& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Average>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Average());
}

void type<::vnx::query::Average>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Average& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Comparison>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Comparison());
}

void type<::vnx::query::Comparison>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Comparison& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Count>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Count());
}

void type<::vnx::query::Count>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Count& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Delete>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Delete());
}

void type<::vnx::query::Delete>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Delete& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Expression>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Expression());
}

void type<::vnx::query::Expression>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Expression& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Field>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Field());
}

void type<::vnx::query::Field>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Field& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Function>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Function());
}

void type<::vnx::query::Function>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Function& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::GroupBy>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::GroupBy());
}

void type<::vnx::query::GroupBy>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::GroupBy& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Limit>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Limit());
}

void type<::vnx::query::Limit>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Limit& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Max>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Max());
}

void type<::vnx::query::Max>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Max& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Min>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Min());
}

void type<::vnx::query::Min>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Min& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::OrderBy>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::OrderBy());
}

void type<::vnx::query::OrderBy>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::OrderBy& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Query>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Query());
}

void type<::vnx::query::Query>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Query& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Select>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Select());
}

void type<::vnx::query::Select>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Select& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Sum>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Sum());
}

void type<::vnx::query::Sum>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Sum& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Unary>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Unary());
}

void type<::vnx::query::Unary>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Unary& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Update>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Update());
}

void type<::vnx::query::Update>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Update& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::Value>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::Value());
}

void type<::vnx::query::Value>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::Value& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::vnx::query::func_type_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::func_type_e());
}

void type<::vnx::query::func_type_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::func_type_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

void type<::vnx::query::op_type_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::vnx::query::op_type_e());
}

void type<::vnx::query::op_type_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::query::op_type_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}


} // namespace vnx


namespace vnx {
namespace query {


static void register_all_types() {
	vnx::register_type_code(::vnx::query::Aggregate::static_create_type_code());
	vnx::register_type_code(::vnx::query::Average::static_create_type_code());
	vnx::register_type_code(::vnx::query::Comparison::static_create_type_code());
	vnx::register_type_code(::vnx::query::Count::static_create_type_code());
	vnx::register_type_code(::vnx::query::Delete::static_create_type_code());
	vnx::register_type_code(::vnx::query::Expression::static_create_type_code());
	vnx::register_type_code(::vnx::query::Field::static_create_type_code());
	vnx::register_type_code(::vnx::query::Function::static_create_type_code());
	vnx::register_type_code(::vnx::query::GroupBy::static_create_type_code());
	vnx::register_type_code(::vnx::query::Limit::static_create_type_code());
	vnx::register_type_code(::vnx::query::Max::static_create_type_code());
	vnx::register_type_code(::vnx::query::Min::static_create_type_code());
	vnx::register_type_code(::vnx::query::OrderBy::static_create_type_code());
	vnx::register_type_code(::vnx::query::Query::static_create_type_code());
	vnx::register_type_code(::vnx::query::Select::static_create_type_code());
	vnx::register_type_code(::vnx::query::Sum::static_create_type_code());
	vnx::register_type_code(::vnx::query::Unary::static_create_type_code());
	vnx::register_type_code(::vnx::query::Update::static_create_type_code());
	vnx::register_type_code(::vnx::query::Value::static_create_type_code());
	vnx::register_type_code(::vnx::query::func_type_e::static_create_type_code());
	vnx::register_type_code(::vnx::query::op_type_e::static_create_type_code());
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;

const vnx::TypeCode* const vnx_native_type_code_Aggregate = vnx::get_type_code(vnx::Hash64(0x1c9aa33b915b86dfull));
const vnx::TypeCode* const vnx_native_type_code_Average = vnx::get_type_code(vnx::Hash64(0x17a49318275814c8ull));
const vnx::TypeCode* const vnx_native_type_code_Comparison = vnx::get_type_code(vnx::Hash64(0x5390eb111dfabfdaull));
const vnx::TypeCode* const vnx_native_type_code_Count = vnx::get_type_code(vnx::Hash64(0xcf067f1e523c9400ull));
const vnx::TypeCode* const vnx_native_type_code_Delete = vnx::get_type_code(vnx::Hash64(0x853234401f1c6b4full));
const vnx::TypeCode* const vnx_native_type_code_Expression = vnx::get_type_code(vnx::Hash64(0x7bc4190eadb27d64ull));
const vnx::TypeCode* const vnx_native_type_code_Field = vnx::get_type_code(vnx::Hash64(0x3c675ff36d258a82ull));
const vnx::TypeCode* const vnx_native_type_code_Function = vnx::get_type_code(vnx::Hash64(0x7bcc063cdbb6f12dull));
const vnx::TypeCode* const vnx_native_type_code_GroupBy = vnx::get_type_code(vnx::Hash64(0xbc2edcf64acd47a7ull));
const vnx::TypeCode* const vnx_native_type_code_Limit = vnx::get_type_code(vnx::Hash64(0x50b7cff9906dd669ull));
const vnx::TypeCode* const vnx_native_type_code_Max = vnx::get_type_code(vnx::Hash64(0x1728bd90ff0d8af8ull));
const vnx::TypeCode* const vnx_native_type_code_Min = vnx::get_type_code(vnx::Hash64(0xf5c5d495ee64b93eull));
const vnx::TypeCode* const vnx_native_type_code_OrderBy = vnx::get_type_code(vnx::Hash64(0xb9dc0295d667e70cull));
const vnx::TypeCode* const vnx_native_type_code_Query = vnx::get_type_code(vnx::Hash64(0x588a043d9c55a247ull));
const vnx::TypeCode* const vnx_native_type_code_Select = vnx::get_type_code(vnx::Hash64(0xb2ec0d2037f0e3a2ull));
const vnx::TypeCode* const vnx_native_type_code_Sum = vnx::get_type_code(vnx::Hash64(0x7ec40912aaea9d4full));
const vnx::TypeCode* const vnx_native_type_code_Unary = vnx::get_type_code(vnx::Hash64(0xc3bf356643366557ull));
const vnx::TypeCode* const vnx_native_type_code_Update = vnx::get_type_code(vnx::Hash64(0xb6864eac29604e6cull));
const vnx::TypeCode* const vnx_native_type_code_Value = vnx::get_type_code(vnx::Hash64(0xfd3aaed370d889c1ull));
const vnx::TypeCode* const vnx_native_type_code_func_type_e = vnx::get_type_code(vnx::Hash64(0x3cddce20ab7c4271ull));
const vnx::TypeCode* const vnx_native_type_code_op_type_e = vnx::get_type_code(vnx::Hash64(0xe97243d6947b0e63ull));

} // namespace vnx
} // namespace query
