
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_database_Server_CLIENT_HXX_
#define INCLUDE_vnx_database_Server_CLIENT_HXX_

#include <vnx/Client.h>
#include <vnx/Hash128.hpp>
#include <vnx/Module.h>
#include <vnx/Object.hpp>
#include <vnx/database/table_info_t.hxx>
#include <vnx/query/Delete.hxx>
#include <vnx/query/Select.hxx>
#include <vnx/query/Update.hxx>


namespace vnx {
namespace database {

class ServerClient : public vnx::Client {
public:
	ServerClient(const std::string& service_name);
	
	ServerClient(vnx::Hash64 service_addr);
	
	::vnx::Object vnx_get_config_object();
	
	::vnx::Variant vnx_get_config(const std::string& name = "");
	
	void vnx_set_config_object(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config_object_async(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	void vnx_set_config_async(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	::vnx::TypeCode vnx_get_type_code();
	
	std::shared_ptr<const ::vnx::ModuleInfo> vnx_get_module_info();
	
	void vnx_restart();
	
	void vnx_restart_async();
	
	void vnx_stop();
	
	void vnx_stop_async();
	
	vnx::bool_t vnx_self_test();
	
	std::vector<::vnx::Object> select(const ::vnx::query::Select& query = ::vnx::query::Select());
	
	void update(const ::vnx::query::Update& query = ::vnx::query::Update());
	
	void update_async(const ::vnx::query::Update& query = ::vnx::query::Update());
	
	void delete_from(const ::vnx::query::Delete& query = ::vnx::query::Delete());
	
	void delete_from_async(const ::vnx::query::Delete& query = ::vnx::query::Delete());
	
	::vnx::Object select_one(const std::string& table = "", const ::vnx::Hash128& id = ::vnx::Hash128());
	
	std::vector<::vnx::Object> select_many(const std::string& table = "", const std::vector<::vnx::Hash128>& ids = {});
	
	void insert_one(const std::string& table = "", const ::vnx::Hash128& id = ::vnx::Hash128(), const ::vnx::Object& object = ::vnx::Object());
	
	void insert_one_async(const std::string& table = "", const ::vnx::Hash128& id = ::vnx::Hash128(), const ::vnx::Object& object = ::vnx::Object());
	
	void insert_many(const std::string& table = "", const std::map<::vnx::Hash128, ::vnx::Object>& objects = {});
	
	void insert_many_async(const std::string& table = "", const std::map<::vnx::Hash128, ::vnx::Object>& objects = {});
	
	void update_one(const std::string& table = "", const ::vnx::Hash128& id = ::vnx::Hash128(), const ::vnx::Object& object = ::vnx::Object());
	
	void update_one_async(const std::string& table = "", const ::vnx::Hash128& id = ::vnx::Hash128(), const ::vnx::Object& object = ::vnx::Object());
	
	void update_many(const std::string& table = "", const std::map<::vnx::Hash128, ::vnx::Object>& objects = {});
	
	void update_many_async(const std::string& table = "", const std::map<::vnx::Hash128, ::vnx::Object>& objects = {});
	
	void delete_one(const std::string& table = "", const ::vnx::Hash128& id = ::vnx::Hash128());
	
	void delete_one_async(const std::string& table = "", const ::vnx::Hash128& id = ::vnx::Hash128());
	
	void delete_many(const std::string& table = "", const std::vector<::vnx::Hash128>& ids = {});
	
	void delete_many_async(const std::string& table = "", const std::vector<::vnx::Hash128>& ids = {});
	
	void truncate(const std::string& table = "");
	
	void truncate_async(const std::string& table = "");
	
	std::vector<::vnx::database::table_info_t> get_table_info();
	
	void write_new_block();
	
	void write_new_block_async();
	
};


} // namespace vnx
} // namespace database

#endif // INCLUDE_vnx_database_Server_CLIENT_HXX_
