
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_database_ServerBase_HXX_
#define INCLUDE_vnx_database_ServerBase_HXX_

#include <vnx/database/package.hxx>
#include <vnx/Hash128.hpp>
#include <vnx/Module.h>
#include <vnx/Object.hpp>
#include <vnx/database/table_info_t.hxx>
#include <vnx/query/Delete.hxx>
#include <vnx/query/Select.hxx>
#include <vnx/query/Update.hxx>


namespace vnx {
namespace database {

class ServerBase : public ::vnx::Module {
public:
	
	std::string location = "data/";
	std::string id_name = "id";
	int64_t max_block_size = 67108864;
	vnx::bool_t show_queries = false;
	vnx::bool_t ignore_errors = false;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x3e27b2d3ee41ac7full;
	
	ServerBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const ServerBase& _value);
	friend std::istream& operator>>(std::istream& _in, ServerBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	using Super::handle;
	
	virtual std::vector<::vnx::Object> sql_query(const std::string& query) const = 0;
	virtual void sql_update(const std::string& query) = 0;
	virtual std::vector<::vnx::Object> select(const ::vnx::query::Select& query) const = 0;
	virtual void update(const ::vnx::query::Update& query) = 0;
	virtual void delete_from(const ::vnx::query::Delete& query) = 0;
	virtual ::vnx::Object select_one(const std::string& table, const ::vnx::Hash128& id) const = 0;
	virtual std::vector<::vnx::Object> select_many(const std::string& table, const std::vector<::vnx::Hash128>& ids) const = 0;
	virtual void insert_one(const std::string& table, const ::vnx::Hash128& id, const ::vnx::Object& object) = 0;
	virtual void insert_many(const std::string& table, const std::map<::vnx::Hash128, ::vnx::Object>& objects) = 0;
	virtual void update_one(const std::string& table, const ::vnx::Hash128& id, const ::vnx::Object& object) = 0;
	virtual void update_many(const std::string& table, const std::map<::vnx::Hash128, ::vnx::Object>& objects) = 0;
	virtual void delete_one(const std::string& table, const ::vnx::Hash128& id) = 0;
	virtual void delete_many(const std::string& table, const std::vector<::vnx::Hash128>& ids) = 0;
	virtual void truncate(const std::string& table) = 0;
	virtual std::vector<::vnx::database::table_info_t> get_table_info() const = 0;
	virtual void write_new_block() = 0;
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};


} // namespace vnx
} // namespace database


namespace vnx {

} // vnx

#endif // INCLUDE_vnx_database_ServerBase_HXX_
