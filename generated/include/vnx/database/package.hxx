
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_database_PACKAGE_HXX_
#define INCLUDE_vnx_database_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>


namespace vnx {
namespace database {


class Root;
class ServerBase;
class Server_delete_from;
class Server_delete_from_return;
class Server_delete_many;
class Server_delete_many_return;
class Server_delete_one;
class Server_delete_one_return;
class Server_get_table_info;
class Server_get_table_info_return;
class Server_insert_many;
class Server_insert_many_return;
class Server_insert_one;
class Server_insert_one_return;
class Server_select;
class Server_select_return;
class Server_select_many;
class Server_select_many_return;
class Server_select_one;
class Server_select_one_return;
class Server_truncate;
class Server_truncate_return;
class Server_update;
class Server_update_return;
class Server_update_many;
class Server_update_many_return;
class Server_update_one;
class Server_update_one_return;
class Server_write_new_block;
class Server_write_new_block_return;
class Table;
struct table_info_t;

extern const vnx::TypeCode* const vnx_native_type_code_Root; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ServerBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_delete_from; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_delete_from_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_delete_many; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_delete_many_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_delete_one; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_delete_one_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_get_table_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_get_table_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_insert_many; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_insert_many_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_insert_one; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_insert_one_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_select; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_select_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_select_many; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_select_many_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_select_one; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_select_one_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_truncate; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_truncate_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_update; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_update_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_update_many; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_update_many_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_update_one; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_update_one_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_write_new_block; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Server_write_new_block_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Table; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_table_info_t; ///< \private

} // namespace vnx
} // namespace database


namespace vnx {

void read(TypeInput& in, ::vnx::database::Root& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::ServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_delete_from& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_delete_from_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_delete_many& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_delete_many_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_delete_one& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_delete_one_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_get_table_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_get_table_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_insert_many& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_insert_many_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_insert_one& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_insert_one_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_select& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_select_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_select_many& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_select_many_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_select_one& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_select_one_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_truncate& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_truncate_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_update& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_update_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_update_many& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_update_many_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_update_one& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_update_one_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_write_new_block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Server_write_new_block_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::Table& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::vnx::database::table_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::vnx::database::Root& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::ServerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_delete_from& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_delete_from_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_delete_many& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_delete_many_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_delete_one& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_delete_one_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_get_table_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_get_table_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_insert_many& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_insert_many_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_insert_one& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_insert_one_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_select& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_select_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_select_many& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_select_many_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_select_one& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_select_one_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_truncate& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_truncate_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_update& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_update_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_update_many& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_update_many_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_update_one& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_update_one_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_write_new_block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Server_write_new_block_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::Table& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::vnx::database::table_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::vnx::database::Root& value); ///< \private
void read(std::istream& in, ::vnx::database::ServerBase& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_delete_from& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_delete_from_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_delete_many& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_delete_many_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_delete_one& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_delete_one_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_get_table_info& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_get_table_info_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_insert_many& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_insert_many_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_insert_one& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_insert_one_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_select& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_select_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_select_many& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_select_many_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_select_one& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_select_one_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_truncate& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_truncate_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_update& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_update_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_update_many& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_update_many_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_update_one& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_update_one_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_write_new_block& value); ///< \private
void read(std::istream& in, ::vnx::database::Server_write_new_block_return& value); ///< \private
void read(std::istream& in, ::vnx::database::Table& value); ///< \private
void read(std::istream& in, ::vnx::database::table_info_t& value); ///< \private

void write(std::ostream& out, const ::vnx::database::Root& value); ///< \private
void write(std::ostream& out, const ::vnx::database::ServerBase& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_delete_from& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_delete_from_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_delete_many& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_delete_many_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_delete_one& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_delete_one_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_get_table_info& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_get_table_info_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_insert_many& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_insert_many_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_insert_one& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_insert_one_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_select& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_select_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_select_many& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_select_many_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_select_one& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_select_one_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_truncate& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_truncate_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_update& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_update_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_update_many& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_update_many_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_update_one& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_update_one_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_write_new_block& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Server_write_new_block_return& value); ///< \private
void write(std::ostream& out, const ::vnx::database::Table& value); ///< \private
void write(std::ostream& out, const ::vnx::database::table_info_t& value); ///< \private

void accept(Visitor& visitor, const ::vnx::database::Root& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::ServerBase& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_delete_from& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_delete_from_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_delete_many& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_delete_many_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_delete_one& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_delete_one_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_get_table_info& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_get_table_info_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_insert_many& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_insert_many_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_insert_one& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_insert_one_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_select& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_select_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_select_many& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_select_many_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_select_one& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_select_one_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_truncate& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_truncate_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_update& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_update_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_update_many& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_update_many_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_update_one& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_update_one_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_write_new_block& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Server_write_new_block_return& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::Table& value); ///< \private
void accept(Visitor& visitor, const ::vnx::database::table_info_t& value); ///< \private

/// \private
template<>
struct type<::vnx::database::Root> {
	void read(TypeInput& in, ::vnx::database::Root& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Root& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Root& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Root& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Root& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Root& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::ServerBase> {
	void read(TypeInput& in, ::vnx::database::ServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::ServerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::ServerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::ServerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::ServerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::vnx::database::Server_delete_from> {
	void read(TypeInput& in, ::vnx::database::Server_delete_from& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_delete_from& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_delete_from& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_delete_from& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_delete_from& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_delete_from& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_delete_from_return> {
	void read(TypeInput& in, ::vnx::database::Server_delete_from_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_delete_from_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_delete_from_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_delete_from_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_delete_from_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_delete_from_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_delete_many> {
	void read(TypeInput& in, ::vnx::database::Server_delete_many& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_delete_many& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_delete_many& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_delete_many& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_delete_many& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_delete_many& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_delete_many_return> {
	void read(TypeInput& in, ::vnx::database::Server_delete_many_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_delete_many_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_delete_many_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_delete_many_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_delete_many_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_delete_many_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_delete_one> {
	void read(TypeInput& in, ::vnx::database::Server_delete_one& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_delete_one& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_delete_one& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_delete_one& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_delete_one& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_delete_one& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_delete_one_return> {
	void read(TypeInput& in, ::vnx::database::Server_delete_one_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_delete_one_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_delete_one_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_delete_one_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_delete_one_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_delete_one_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_get_table_info> {
	void read(TypeInput& in, ::vnx::database::Server_get_table_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_get_table_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_get_table_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_get_table_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_get_table_info& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_get_table_info& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_get_table_info_return> {
	void read(TypeInput& in, ::vnx::database::Server_get_table_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_get_table_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_get_table_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_get_table_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_get_table_info_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_get_table_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_insert_many> {
	void read(TypeInput& in, ::vnx::database::Server_insert_many& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_insert_many& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_insert_many& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_insert_many& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_insert_many& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_insert_many& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_insert_many_return> {
	void read(TypeInput& in, ::vnx::database::Server_insert_many_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_insert_many_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_insert_many_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_insert_many_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_insert_many_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_insert_many_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_insert_one> {
	void read(TypeInput& in, ::vnx::database::Server_insert_one& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_insert_one& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_insert_one& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_insert_one& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_insert_one& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_insert_one& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_insert_one_return> {
	void read(TypeInput& in, ::vnx::database::Server_insert_one_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_insert_one_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_insert_one_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_insert_one_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_insert_one_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_insert_one_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_select> {
	void read(TypeInput& in, ::vnx::database::Server_select& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_select& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_select& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_select& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_select& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_select& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_select_return> {
	void read(TypeInput& in, ::vnx::database::Server_select_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_select_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_select_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_select_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_select_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_select_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_select_many> {
	void read(TypeInput& in, ::vnx::database::Server_select_many& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_select_many& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_select_many& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_select_many& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_select_many& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_select_many& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_select_many_return> {
	void read(TypeInput& in, ::vnx::database::Server_select_many_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_select_many_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_select_many_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_select_many_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_select_many_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_select_many_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_select_one> {
	void read(TypeInput& in, ::vnx::database::Server_select_one& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_select_one& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_select_one& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_select_one& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_select_one& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_select_one& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_select_one_return> {
	void read(TypeInput& in, ::vnx::database::Server_select_one_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_select_one_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_select_one_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_select_one_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_select_one_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_select_one_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_truncate> {
	void read(TypeInput& in, ::vnx::database::Server_truncate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_truncate& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_truncate& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_truncate& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_truncate& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_truncate& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_truncate_return> {
	void read(TypeInput& in, ::vnx::database::Server_truncate_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_truncate_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_truncate_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_truncate_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_truncate_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_truncate_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_update> {
	void read(TypeInput& in, ::vnx::database::Server_update& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_update& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_update& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_update& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_update& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_update& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_update_return> {
	void read(TypeInput& in, ::vnx::database::Server_update_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_update_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_update_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_update_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_update_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_update_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_update_many> {
	void read(TypeInput& in, ::vnx::database::Server_update_many& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_update_many& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_update_many& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_update_many& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_update_many& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_update_many& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_update_many_return> {
	void read(TypeInput& in, ::vnx::database::Server_update_many_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_update_many_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_update_many_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_update_many_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_update_many_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_update_many_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_update_one> {
	void read(TypeInput& in, ::vnx::database::Server_update_one& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_update_one& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_update_one& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_update_one& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_update_one& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_update_one& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_update_one_return> {
	void read(TypeInput& in, ::vnx::database::Server_update_one_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_update_one_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_update_one_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_update_one_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_update_one_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_update_one_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_write_new_block> {
	void read(TypeInput& in, ::vnx::database::Server_write_new_block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_write_new_block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_write_new_block& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_write_new_block& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_write_new_block& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_write_new_block& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Server_write_new_block_return> {
	void read(TypeInput& in, ::vnx::database::Server_write_new_block_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Server_write_new_block_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Server_write_new_block_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Server_write_new_block_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Server_write_new_block_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Server_write_new_block_return& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::Table> {
	void read(TypeInput& in, ::vnx::database::Table& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::Table& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::Table& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::Table& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::Table& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::Table& value, bool special = false);
};

/// \private
template<>
struct type<::vnx::database::table_info_t> {
	void read(TypeInput& in, ::vnx::database::table_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vnx::database::table_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vnx::database::table_info_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vnx::database::table_info_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vnx::database::table_info_t& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::vnx::database::table_info_t& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_vnx_database_PACKAGE_HXX_
